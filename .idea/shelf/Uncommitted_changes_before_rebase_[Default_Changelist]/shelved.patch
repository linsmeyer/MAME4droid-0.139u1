Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/compiler.xml	(date 1626464695589)
+++ .idea/compiler.xml	(date 1626464695589)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <bytecodeTargetLevel target="1.8" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_7\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision 3ed371577077cb70b4fc0548bdf08c73faf33c98)
+++ .idea/misc.xml	(date 1626464695464)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_7" project-jdk-name="1.8" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
   <component name="ProjectType">
Index: app/src/main/java/com/seleuco/mame4droid/Emulator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n * This file is part of MAME4droid.\r\n *\r\n * Copyright (C) 2015 David Valdeita (Seleuco)\r\n *\r\n * This program is free software; you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation; either version 2 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\r\n * General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, see <http://www.gnu.org/licenses>.\r\n *\r\n * Linking MAME4droid statically or dynamically with other modules is\r\n * making a combined work based on MAME4droid. Thus, the terms and\r\n * conditions of the GNU General Public License cover the whole\r\n * combination.\r\n *\r\n * In addition, as a special exception, the copyright holders of MAME4droid\r\n * give you permission to combine MAME4droid with free software programs\r\n * or libraries that are released under the GNU LGPL and with code included\r\n * in the standard release of MAME under the MAME License (or modified\r\n * versions of such code, with unchanged license). You may copy and\r\n * distribute such a system following the terms of the GNU GPL for MAME4droid\r\n * and the licenses of the other code concerned, provided that you include\r\n * the source code of that other code when and as the GNU GPL requires\r\n * distribution of source code.\r\n *\r\n * Note that people who make modified versions of MAME4idroid are not\r\n * obligated to grant this special exception for their modified versions; it\r\n * is their choice whether to do so. The GNU General Public License\r\n * gives permission to release a modified version without this exception;\r\n * this exception also makes it possible to release a modified version\r\n * which carries forward this exception.\r\n *\r\n * MAME4droid is dual-licensed: Alternatively, you can license MAME4droid\r\n * under a MAME license, as set out in http://mamedev.org/\r\n */\r\n\r\npackage com.seleuco.mame4droid;\r\n\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.OutputStream;\r\nimport java.nio.ByteBuffer;\r\n\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.content.pm.PackageManager.NameNotFoundException;\r\nimport android.database.Cursor;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapShader;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Matrix;\r\nimport android.graphics.Paint;\r\nimport android.graphics.Paint.Style;\r\nimport android.graphics.PixelFormat;\r\nimport android.graphics.PorterDuffXfermode;\r\nimport android.graphics.Shader.TileMode;\r\nimport android.media.AudioFormat;\r\nimport android.media.AudioManager;\r\nimport android.media.AudioTrack;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Environment;\r\nimport android.provider.OpenableColumns;\r\nimport android.util.Log;\r\nimport android.view.SurfaceHolder;\r\nimport android.view.View;\r\nimport android.widget.Toast;\r\n\r\nimport com.seleuco.mame4droid.helpers.DialogHelper;\r\nimport com.seleuco.mame4droid.helpers.PrefsHelper;\r\nimport com.seleuco.mame4droid.views.EmulatorViewGL;\r\n \r\npublic class Emulator \r\n{\r\n\tfinal static public int FPS_SHOWED_KEY = 1; \r\n\tfinal static public int EXIT_GAME_KEY = 2;\t\r\n\t//final static public int LAND_BUTTONS_KEY = 3;\r\n\t//final static public int HIDE_LR__KEY = 4;\r\n\t//final static public int BPLUSX_KEY = 5;\r\n\t//final static public int WAYS_STICK_KEY = 6;\r\n\t//final static public int ASMCORES_KEY = 7;\r\n\tfinal static public int INFOWARN_KEY = 8;\r\n\tfinal static public int EXIT_PAUSE = 9;\r\n\tfinal static public int IDLE_WAIT = 10;\r\n\tfinal static public int PAUSE = 11;\r\n\tfinal static public int FRAME_SKIP_VALUE = 12;\r\n\tfinal static public int SOUND_VALUE = 13;\r\n\t\r\n\tfinal static public int THROTTLE = 14;\r\n\tfinal static public int CHEAT = 15;\r\n\tfinal static public int AUTOSAVE = 16;\r\n\tfinal static public int SAVESTATE = 17;\r\n\tfinal static public int LOADSTATE = 18;\r\n\tfinal static public int IN_MENU = 19;\r\n\tfinal static public int EMU_RESOLUTION = 20;\r\n\tfinal static public int FORCE_PXASPECT = 21;\t\r\n\tfinal static public int THREADED_VIDEO = 22;\r\n\tfinal static public int DOUBLE_BUFFER = 23;\r\n\tfinal static public int PXASP1 = 24;\r\n\tfinal static public int NUMBTNS = 25;\r\n\tfinal static public int NUMWAYS = 26;\r\n\tfinal static public int FILTER_FAVORITES = 27;\r\n\tfinal static public int RESET_FILTER = 28;\t\r\n\tfinal static public int LAST_GAME_SELECTED = 29;\t\r\n\tfinal static public int EMU_SPEED = 30;\t\r\n\tfinal static public int AUTOFIRE = 31;\r\n\tfinal static public int VSYNC = 32;\r\n\tfinal static public int HISCORE = 33;\r\n\tfinal static public int VBEAN2X = 34;\r\n\tfinal static public int VANTIALIAS = 35;\r\n\tfinal static public int VFLICKER = 36;\r\n\tfinal static public int FILTER_NUM_YEARS = 37;\r\n\tfinal static public int FILTER_NUM_MANUFACTURERS = 38;\r\n\tfinal static public int FILTER_NUM_DRIVERS_SRC = 39;\r\n\tfinal static public int FILTER_NUM_CATEGORIES = 40;\t\r\n\tfinal static public int FILTER_CLONES = 41;\t\r\n\tfinal static public int FILTER_NOTWORKING = 42;\t\r\n\tfinal static public int FILTER_MANUFACTURER = 43;\t\r\n\tfinal static public int FILTER_GTE_YEAR = 44;\t\r\n\tfinal static public int FILTER_LTE_YEAR = 45;\t\r\n\tfinal static public int FILTER_DRVSRC = 46;\t\t\r\n\tfinal static public int FILTER_CATEGORY = 47;\t\r\n\tfinal static public int SOUND_DEVICE_FRAMES = 48;\t\t\r\n\tfinal static public int SOUND_DEVICE_SR = 49;\r\n\tfinal static public int SOUND_ENGINE = 50;\t\t\r\n\tfinal static public int EMU_AUTO_RESOLUTION = 51;\r\n\tfinal static public int IN_MAME = 52;\r\n\tfinal static public int NETPLAY_HAS_CONNECTION = 53;\r\n\tfinal static public int NETPLAY_HAS_JOINED = 54;\r\n\tfinal static public int NETPLAY_DELAY = 55;\r\n\tfinal static public int SAVELOAD_COMBO = 56;\r\n\tfinal static public int RENDER_RGB = 57;\r\n\tfinal static public int IMAGE_EFFECT = 58;\r\n\tfinal static public int LIGHTGUN = 59;\r\n\tfinal static public int MOUSE = 60;\t\t\r\n\tfinal static public int REFRESH = 61;\r\n\t\r\n\tfinal static public int FILTER_YEARS_ARRAY = 0;\r\n\tfinal static public int FILTER_MANUFACTURERS_ARRAY = 1;\r\n\tfinal static public int FILTER_DRIVERS_SRC_ARRAY = 2;\r\n\tfinal static public int FILTER_CATEGORIES_ARRAY = 3;\r\n\tfinal static public int FILTER_KEYWORD = 4;\r\n\tfinal static public int GAME_SELECTED = 5;\r\n\tfinal static public int ROM_PATH = 6;\r\n\tfinal static public int ROM_NAME = 7;\r\n\tfinal static public int VERSION = 8;\t\r\n\tfinal static public int BIOS = 9;\r\n\t \r\n    private static MAME4droid mm = null;\r\n    \r\n    private static boolean isEmulating = false;\r\n\r\n\tpublic static boolean isEmulating() {\r\n\t\treturn isEmulating;\r\n\t}\r\n\r\n\t//private static boolean paused = false;\r\n    private static Object lock1 = new Object();\r\n\t\r\n\tprivate static SurfaceHolder holder = null;\r\n\tprivate static Bitmap emuBitmap = Bitmap.createBitmap(320, 240, Bitmap.Config.RGB_565);\r\n\tprivate static ByteBuffer screenBuff = null;\r\n\t\r\n\tprivate static int []screenBuffPx = new int[640*480*3];\t\r\n\tpublic  static int[] getScreenBuffPx() {\r\n\t\treturn screenBuffPx;\r\n\t}\r\n\r\n\tprivate static boolean frameFiltering = false;\t\r\n\tpublic static boolean isFrameFiltering() {\r\n\t\treturn frameFiltering;\r\n\t}\r\n\r\n\tprivate static Paint emuPaint = null;\r\n\tprivate static Paint filterPaint = null;\r\n\tprivate static Paint debugPaint = new Paint();\r\n\tprivate static Bitmap filterBitmap = null;\r\n\t\r\n\tprivate static Matrix mtx = new Matrix();\r\n\t\r\n\tprivate static int window_width = 320;\r\n\tpublic static int getWindow_width() {\r\n\t\treturn window_width;\r\n\t}\r\n\r\n\tprivate static int window_height = 240;\r\n\tpublic static int getWindow_height() {\r\n\t\treturn window_height;\r\n\t}\r\n\r\n\tprivate static int emu_width = 320;\r\n\tprivate static int emu_height = 240;\r\n\tprivate static int emu_vis_width = 320;\r\n\tprivate static int emu_vis_height = 240;\r\n\t\r\n\tprivate static AudioTrack audioTrack = null;\r\n\t\r\n\tprivate static boolean isThreadedSound  = false;\r\n\tprivate static boolean isDebug = false;\r\n\tprivate static int videoRenderMode  =  PrefsHelper.PREF_RENDER_SW;\r\n\r\n\tprivate static boolean inMAME = false;\r\n\tprivate static boolean inMenu = false;\r\n\tprivate static boolean oldInMenu = false;\r\n\r\n\tpublic static boolean isInMAME() {\r\n\t\treturn Emulator.getValue(Emulator.IN_MAME)==1;\r\n\t\t//return inMAME;\r\n\t}\r\n\tpublic static boolean isInMenu() {\r\n\t\treturn inMenu;\r\n\t}\t\r\n\tprivate static String overlayFilterValue  =  PrefsHelper.PREF_OVERLAY_NONE;\r\n\t\r\n\tpublic static String getOverlayFilterValue() {\r\n\t\treturn overlayFilterValue;\r\n\t}\r\n\r\n\tpublic static void setOverlayFilterValue(String value) {\r\n\t\tEmulator.overlayFilterValue = value;\r\n\t}\r\n\t\r\n\tprivate static boolean needsRestart = false;\r\n\t\r\n\tpublic static void setNeedRestart(boolean value){\r\n\t\tneedsRestart = value;\r\n\t}\r\n\t\r\n\tpublic static boolean isRestartNeeded(){\r\n\t\treturn needsRestart;\r\n\t}\r\n\t\r\n\tprivate static boolean warnResChanged = false;\r\n\r\n\tpublic static boolean isWarnResChanged() {\r\n\t\treturn warnResChanged;\r\n\t}\r\n\r\n\tpublic static void setWarnResChanged(boolean warnResChanged) {\r\n\t\tEmulator.warnResChanged = warnResChanged;\r\n\t}\r\n\t\r\n\tprivate static boolean paused = true;\r\n\t\r\n\tpublic static boolean isPaused() {\r\n\t\treturn paused;\r\n\t}\r\n\r\n\tprivate static boolean portraitFull = false;\r\n\r\n\tpublic static boolean isPortraitFull() {\r\n\t\treturn portraitFull;\r\n\t}\r\n\t\r\n\tpublic static void setPortraitFull(boolean portraitFull) {\r\n\t\tEmulator.portraitFull = portraitFull;\r\n\t}\r\n\r\n\tstatic long j = 0;\r\n\tstatic int i = 0;\r\n\tstatic int fps = 0;\r\n\tstatic long millis;\r\n\t\r\n\tprivate static SoundThread soundT = new SoundThread();\r\n\tprivate static Thread nativeVideoT = null;\r\n\t\r\n\tstatic\r\n\t{\r\n\t\ttry\r\n\t\t{\t\t\r\n\t\t    System.loadLibrary(\"mame4droid-jni\");\t\t  \r\n\t\t}\r\n\t\tcatch(java.lang.Error e)\r\n\t\t{\r\n\t\t   e.printStackTrace();\t\r\n\t\t}\r\n\t\t\t\t\r\n\t    debugPaint.setARGB(255, 255, 255, 255);\r\n\t    debugPaint.setStyle(Style.STROKE);\t\t\r\n\t    debugPaint.setTextSize(16);\r\n\t    //videoT.start();\r\n\t}\r\n\t\r\n\tpublic static int getEmulatedWidth() {\r\n\t\treturn emu_width;\r\n\t}\r\n\r\n\tpublic static int getEmulatedHeight() {\r\n\t\treturn emu_height;\r\n\t}\r\n\t\r\n\tpublic static int getEmulatedVisWidth() {\r\n\t\treturn emu_vis_width;\r\n\t}\r\n\r\n\tpublic static int getEmulatedVisHeight() {\r\n\t\treturn emu_vis_height;\r\n\t}\t\r\n\t\r\n\tpublic static boolean isThreadedSound() {\r\n\t\treturn isThreadedSound;\r\n\t}\r\n\r\n\tpublic static void setThreadedSound(boolean isThreadedSound) {\r\n\t\tEmulator.isThreadedSound = isThreadedSound;\r\n\t}\r\n\r\n\tpublic static boolean isDebug() {\r\n\t\treturn isDebug;\r\n\t}\r\n\r\n\tpublic static void setDebug(boolean isDebug) {\r\n\t\tEmulator.isDebug = isDebug;\r\n\t}\r\n\t\r\n\tpublic static int getVideoRenderMode() {\r\n\t\treturn Emulator.videoRenderMode;\r\n\t}\r\n\t\r\n\tpublic static void setVideoRenderMode(int videoRenderMode) {\r\n\t\tEmulator.videoRenderMode = videoRenderMode;\r\n\t}\r\n\r\n\tpublic static Paint getEmuPaint() {\r\n\t\treturn emuPaint;\r\n\t}\r\n\t\r\n\tpublic static Paint getDebugPaint() {\r\n\t\treturn debugPaint;\r\n\t}\r\n\t\r\n\tpublic static Matrix getMatrix() {\r\n\t\treturn mtx;\r\n\t}\r\n\t\r\n\t//synchronized\r\n\tpublic static SurfaceHolder getHolder(){\r\n\t\treturn holder;\r\n\t}\r\n\t\r\n\t//synchronized \r\n\tpublic static Bitmap getEmuBitmap(){\r\n\t\treturn emuBitmap;\r\n\t}\r\n\t\r\n\t//synchronized \r\n\tpublic static ByteBuffer getScreenBuffer(){\r\n\t\treturn screenBuff;\r\n\t}\r\n\t\r\n\tpublic static Bitmap getFilterBitmap(){\r\n\t\treturn filterBitmap;\r\n\t}\r\n\t\r\n\tpublic static void setFilterBitmap(Bitmap value){\t\t\t\t\r\n\t\tfilterBitmap = value;\r\n\t\tif(filterBitmap!=null)\r\n\t\t{\r\n\t\t   filterPaint = new Paint();\r\n\t       filterPaint.setXfermode(new PorterDuffXfermode(android.graphics.PorterDuff.Mode.MULTIPLY));\r\n\t       filterPaint.setShader(new BitmapShader(filterBitmap, TileMode.REPEAT, TileMode.REPEAT));\r\n\t\t}\r\n\t\telse filterPaint = null;\r\n\t}\t\r\n\t\r\n\t\r\n\tpublic static void setHolder(SurfaceHolder value) {\r\n\t\t\r\n\t\t//synchronized(lock1)\r\n\t\t//{\r\n\t\t\tif(value!=null)\r\n\t\t\t{\r\n\t\t\t\tholder = value;\r\n\t\t\t\tholder.setFormat(PixelFormat.OPAQUE);\r\n\t\t\t\t//holder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);\r\n\t\t\t\tholder.setKeepScreenOn(true);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tholder=null;\r\n\t\t\t}\r\n\t\t//}\t\t\r\n\t}\r\n\t\t\r\n\tpublic static void setMAME4droid(MAME4droid mm) {\r\n\t\tEmulator.mm = mm;\t\r\n\t}\r\n\t\r\n\t//VIDEO\r\n\tpublic static void setWindowSize(int w, int h) {\r\n\t\t\r\n\t\t//System.out.println(\"window size \"+w+\" \"+h);\r\n\t\t\r\n\t\twindow_width = w;\r\n\t\twindow_height = h;\r\n\t\t\r\n\t\tif(videoRenderMode == PrefsHelper.PREF_RENDER_GL)\r\n\t\t\treturn;\t\t\t\t\r\n\r\n\t\tmtx.setScale((float)(window_width / (float)emu_width), (float)(window_height / (float)emu_height));\r\n\t}\r\n\r\n\tpublic static void setFrameFiltering(boolean value) {\r\n\t    frameFiltering = value;\t\t\t\r\n\t\tif(value)\r\n\t\t{\r\n\t\t\temuPaint = new Paint();\r\n\t\t\temuPaint.setFilterBitmap(true);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\temuPaint = null;\r\n\t\t}\r\n\t}\r\n\t\t\r\n\t//synchronized \r\n\tstatic void bitblt(ByteBuffer sScreenBuff) {\r\n\t\t\r\n\t\t//Log.d(\"Thread Video\", \"fuera lock\");\r\n\t\tsynchronized(lock1){\r\n\t\ttry {\r\n\t\t\t//Log.d(\"Thread Video\", \"dentro lock\");\t\t\t\t\t\r\n\t\t\tscreenBuff = sScreenBuff;\r\n\t\t\tEmulator.inMAME = Emulator.getValue(Emulator.IN_MAME)==1;\r\n\t\t\tEmulator.inMenu = Emulator.getValue(Emulator.IN_MENU)==1;\r\n\t\t\t\t\t\t\r\n            if(inMenu != oldInMenu)\r\n            {\r\n                final View v = mm.getInputView();\r\n                if(v!=null)\r\n                {\r\n                \tmm.runOnUiThread(new Runnable() {\r\n                        public void run() {\r\n                \t      v.invalidate();\r\n                        }\r\n                \t});\r\n                }\r\n            }\r\n            oldInMenu = inMenu;\r\n            \r\n\t\t\tif(videoRenderMode == PrefsHelper.PREF_RENDER_GL){\r\n\t\t\t\t//if(mm.getEmuView() instanceof EmulatorViewGL)\r\n\t\t\t\t((EmulatorViewGL)mm.getEmuView()).requestRender();\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\t\t    \t\t\t\t\t\r\n\t\t\t\t//Log.d(\"Thread Video\", \"holder \"+holder);\r\n\t\t\t\tif (holder==null)\r\n\t\t\t\t\treturn;\r\n\t\r\n\t\t\t\tCanvas canvas = holder.lockCanvas();\t\t\r\n\t\t\t\tsScreenBuff.rewind();\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\temuBitmap.copyPixelsFromBuffer(sScreenBuff);\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\ti++;\r\n\t\t\t\tMatrix oldMtx = canvas.getMatrix();\r\n\t\t\t\tcanvas.concat(mtx);\t\t\t\r\n\t\t\t\tcanvas.drawBitmap(emuBitmap, 0, 0, emuPaint);\r\n\t\t\t\t\t\t\t\t\t\t       \t\t        \r\n\t\t\t\tif(filterBitmap!=null && Emulator.getValue(Emulator.IN_MAME)==1)\r\n\t\t\t\t{\r\n\t\t\t\t\tcanvas.setMatrix(oldMtx);\r\n\t\t\t\t    canvas.drawRect(0, 0,Emulator.getWindow_width() , Emulator.getWindow_height(), filterPaint);\r\n\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t//canvas.drawBitmap(emuBitmap, null, frameRect, emuPaint);\r\n\t\t\t\tif(isDebug)\r\n\t\t\t\t{\t\r\n\t\t\t\t\tcanvas.drawText(\"Normal fps:\"+fps+ \" \"+inMAME, 5,  40, debugPaint);\r\n\t\t\t\t\tif(System.currentTimeMillis() - millis >= 1000) {fps = i; i=0;millis = System.currentTimeMillis();}\r\n\t\t\t\t}\r\n\t\t\t\t//Log.d(\"Thread Video\", \"holder UNLOCK!\"+holder);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\tholder.unlockCanvasAndPost(canvas);\t\t\t\t\r\n\t\t\t}\r\n\t\t\t//Log.d(\"Thread Video\", \"fin lock\");\t\r\n\t\t    \t\t\t\t\t\t\r\n\t\t} catch (/*Throwable*/NullPointerException t) {\r\n\t\t\tLog.getStackTraceString(t);\r\n\t\t\tt.printStackTrace();\r\n\t\t}\t\t\r\n\t\t}\t        \r\n\t}\r\n\t\r\n\t//synchronized \r\n\tstatic public void changeVideo(final int newWidth, final int newHeight, final int newVisWidth, final int newVisHeight){\t\r\n\t\t\t\t\t\t\r\n\t\t//Log.d(\"Thread Video\", \"changeVideo\");\r\n\t\tsynchronized(lock1){\r\n\t\t\t\t\r\n\t\tmm.getInputHandler().resetInput();\r\n\t\t\r\n\t\twarnResChanged = emu_width!=newWidth || emu_height!=newHeight || emu_vis_width != newVisWidth || emu_vis_height != newVisHeight;\r\n\t\t\r\n\t\t//if(emu_width!=newWidth || emu_height!=newHeight)\r\n\t\t//{\r\n\t\t\temu_width = newWidth;\r\n\t\t\temu_height = newHeight;\r\n\t\t\temu_vis_width = newVisWidth;\r\n\t\t\temu_vis_height = newVisHeight;\r\n\t\t\t\t\t\t\r\n\t\t\tmtx.setScale((float)(window_width / (float)emu_width), (float)(window_height / (float)emu_height));\t\r\n\t\t\t\r\n\t\t\tif(videoRenderMode == PrefsHelper.PREF_RENDER_GL)\r\n\t\t\t{\r\n\t\t\t\tGLRenderer r = (GLRenderer)((EmulatorViewGL)mm.getEmuView()).getRender();\t\t\t\t\r\n\t\t\t\tif(r!=null)r.changedEmulatedSize();\t\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\temuBitmap = Bitmap.createBitmap(newWidth, newHeight, Bitmap.Config.RGB_565);\r\n\t\t\t}\r\n\t\t    \r\n\t\t\tmm.getMainHelper().updateEmuValues();\r\n\t\t\t\r\n\t\t\tmm.runOnUiThread(new Runnable() {\r\n                public void run() {\r\n                \t\r\n                \t//Toast.makeText(mm, \"changeVideo newWidth:\"+newWidth+\" newHeight:\"+newHeight+\" newVisWidth:\"+newVisWidth+\" newVisHeight:\"+newVisHeight,Toast.LENGTH_SHORT).show();                \t\r\n            \t\tmm.overridePendingTransition(0, 0);\r\n                \tif(warnResChanged && videoRenderMode == PrefsHelper.PREF_RENDER_GL && Build.VERSION.SDK_INT <= Build.VERSION_CODES.JELLY_BEAN_MR1)\r\n                \t    mm.getEmuView().setVisibility(View.INVISIBLE);\r\n                \tmm.getMainHelper().updateMAME4droid();\r\n                \tif(mm.getEmuView().getVisibility()!=View.VISIBLE)\r\n                \t    mm.getEmuView().setVisibility(View.VISIBLE);\r\n                }\r\n            });            \r\n\t\t//}\t\t  \r\n\t\t  }\r\n\t\t\r\n\t\tif(videoRenderMode != PrefsHelper.PREF_RENDER_GL)\r\n\t\t\ttry { Thread.sleep(100);} catch (InterruptedException e) {}\r\n\t\t\t\t\t\t\t\t\r\n\t\tif(nativeVideoT==null)\r\n\t\t{\r\n\t\t\tnativeVideoT = new Thread(new Runnable(){\r\n\t\t\t\tpublic void run() {\r\n\t\t\t\t\t\r\n\t\t\t\t\tEmulator.setValue(Emulator.THREADED_VIDEO,mm.getPrefsHelper().isThreadedVideo() ? 1 : 0 );\r\n\t\t\t\t\t\r\n\t\t\t\t\tif( mm.getPrefsHelper().isThreadedVideo())\t\t\t\t\t \r\n\t\t\t\t\t   runVideoT();\t\t\t\t\t\r\n\t\t\t\t}\t\t\t\r\n\t\t\t},\"emulatorNativeVideo-Thread\");\r\n\t\t\t\r\n\t\t\tif(mm.getPrefsHelper().getVideoThreadPriority()==PrefsHelper.LOW)\r\n\t\t\t{\t\r\n\t\t\t   nativeVideoT.setPriority(Thread.MIN_PRIORITY);\r\n\t\t\t}   \r\n\t\t\telse if(mm.getPrefsHelper().getVideoThreadPriority()==PrefsHelper.NORMAL)\r\n\t\t\t{\r\n\t\t\t   nativeVideoT.setPriority(Thread.NORM_PRIORITY);\r\n\t\t\t}   \r\n\t\t\telse\r\n\t\t\t   nativeVideoT.setPriority(Thread.MAX_PRIORITY);\r\n\t\t\t\r\n\t\t\t//nativeVideoT.setPriority(9);\r\n\t\t\tnativeVideoT.start();\r\n\t\t}\r\n\t}\r\n\t\r\n\t//SOUND\r\n\tstatic public void initAudio(int freq, boolean stereo)\t\r\n\t{\r\n\t\tint sampleFreq = freq;\r\n\t\t\r\n\t\tint channelConfig = stereo ? AudioFormat.CHANNEL_CONFIGURATION_STEREO : AudioFormat.CHANNEL_CONFIGURATION_MONO;\r\n\t\tint audioFormat = AudioFormat.ENCODING_PCM_16BIT;\r\n\r\n\t\tint bufferSize = AudioTrack.getMinBufferSize(sampleFreq, channelConfig, audioFormat);\r\n\r\n        if (mm.getPrefsHelper().getSoundEngine()==PrefsHelper.PREF_SNDENG_AUDIOTRACK_HIGH)\r\n\t\t\tbufferSize +=  bufferSize / 4;\r\n\t\t\t\t\r\n\t\t//System.out.println(\"Buffer Size \"+bufferSize);\r\n\t\t\r\n\t\taudioTrack = new AudioTrack(AudioManager.STREAM_MUSIC,\r\n\t\t\t\tsampleFreq,\r\n\t\t\t\tchannelConfig,\r\n\t\t\t\taudioFormat,\r\n\t\t\t\tbufferSize,\r\n\t\t\t\tAudioTrack.MODE_STREAM);\r\n\t\t\r\n\t\taudioTrack.play();\t\t\t\t\r\n\t}\r\n\t\r\n\tpublic static void endAudio(){\r\n\t\tif(audioTrack!=null) {\r\n\t\t\taudioTrack.stop();\r\n\t\t\taudioTrack.release();\r\n\t\t}\r\n\t\taudioTrack = null;\r\n\t}\r\n\t\t\r\n\tpublic static void writeAudio(byte[] b, int sz)\r\n\t{\r\n\t\t//System.out.println(\"Envio \"+sz+\" \"+audioTrack);\r\n\t\tif(audioTrack!=null)\r\n\t\t{\r\n\t\t\t\r\n\t\t\tif(isThreadedSound && soundT!=null)\r\n\t\t\t{\r\n\t\t\t   soundT.setAudioTrack(audioTrack);\r\n\t\t\t   soundT.writeSample(b, sz);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t   audioTrack.write(b, 0, sz);\r\n\t\t\t}  \r\n\t\t}   \r\n\t}\t\r\n\t\r\n\t\r\n\t//LIVE CYCLE\r\n\tpublic static void pause(){\r\n\t\t//Log.d(\"EMULATOR\", \"PAUSE\");\r\n\t\t\r\n\t\tif(isEmulating)\r\n\t\t{\t\t    \r\n\t\t\t//pauseEmulation(true);\r\n\t\t\tEmulator.setValue(Emulator.PAUSE, 1);\r\n\t\t\tpaused = true;\r\n\t\t}   \r\n\t\t\r\n\t\tif(audioTrack!=null)\r\n\t\t{\t\t    \r\n\t\t\ttry{audioTrack.pause();}catch(Throwable e){};\r\n\t\t}\r\n\t\t\r\n\t\ttry {\r\n\t\t\tThread.sleep(60);//ensure threads stop\r\n\t\t} catch (InterruptedException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\r\n\t}\r\n\t\r\n\tpublic static void resume(){\r\n\t\t//Log.d(\"EMULATOR\", \"RESUME\");\r\n\t\t\r\n\t\tif(isRestartNeeded())\r\n\t\t\treturn;\r\n\t\t\r\n\t\tif(audioTrack!=null)\r\n\t\t    audioTrack.play();\r\n\t\t\r\n\t\tif(isEmulating)\r\n\t\t{\t\t\t\t\r\n\t\t\tEmulator.setValue(Emulator.PAUSE, 0);\r\n\t\t\tEmulator.setValue(Emulator.EXIT_PAUSE, 1);\t\r\n\t\t\tpaused = false;\r\n\t\t}    \r\n\t}\r\n\t\r\n\t//EMULATOR\r\n\tpublic static void emulate(final String libPath,final String resPath){\r\n\r\n\t\t//Thread.currentThread().setPriority(Thread.MAX_PRIORITY);\r\n\r\n\t\tif (isEmulating)return;\r\n\r\n\t\tThread t = new Thread(new Runnable(){\r\n\t\t\t\r\n\t\t\tpublic void run() {\r\n\t\t\t\t\r\n\t\t\t\tboolean extROM = false;\t\r\n\t\t\t\tisEmulating = true;\r\n\t\t\t\tinit(libPath,resPath);\r\n\t\t\t\tfinal String versionName = mm.getMainHelper().getVersion();\r\n\t\t\t\tEmulator.setValueStr(Emulator.VERSION, versionName);\r\n\t\t\t\tIntent intent = mm.getIntent();\r\n\t\t\t    String action = intent.getAction();\r\n\t\t\t\t//Uri pkg = null;\r\n\t\t\t\tString fileName = null;\r\n\t\t\t\tString path = null;\r\n\t\t\t\tboolean delete = false;\r\n\t\t\t\tif(action == Intent.ACTION_VIEW)\r\n\t\t\t    {\r\n\t\t\t    \t  //android.os.Debug.waitForDebugger();\r\n\t\t\t\t\t  //pkg = mm.getReferrer();\r\n\t\t\t\t\t  //System.out.println(\"PKG: \"+pkg.getHost());\r\n\r\n\t\t\t      \t  Uri _uri = intent.getData();\r\n\t\t\t      \t  //System.out.println(\"URI: \"+_uri.toString());\r\n\t\t\t      \t  boolean error = false;\r\n\r\n\t\t\t      \t  //String filePath = null;\r\n\r\n\r\n\t\t\t\t\t  Log.d(\"\",\"URI = \"+ _uri);\r\n\t\t\t\t\t  try {\r\n\t\t\t\t\t\t  if (_uri != null && \"content\".equals(_uri.getScheme())) {\r\n\t\t\t\t\t\t  \t  /*\r\n\t\t\t\t\t\t\t  Cursor cursor = mm.getContentResolver().query(_uri, new String[]{android.provider.MediaStore.Images.ImageColumns.DATA}, null, null, null);\r\n\t\t\t\t\t\t\t  cursor.moveToFirst();\r\n\t\t\t\t\t\t\t  filePath = cursor.getString(0);\r\n\t\t\t\t\t\t\t  cursor.close();\r\n\t\t\t\t              java.io.File f = new java.io.File(filePath);\r\n\t\t\t\t\t\t\t  fileName = f.getName();\r\n\t\t\t\t\t\t\t  path = f.getAbsolutePath().substring(0, f.getAbsolutePath().lastIndexOf(File.separator));\r\n\t\t\t\t\t\t\t  */\r\n\t\t\t\t\t\t\t  fileName = mm.getMainHelper().getFileName(_uri);\r\n\t\t\t\t\t\t\t  String state = Environment.getExternalStorageState();\r\n\r\n\t\t\t\t\t\t  \t  if(Environment.MEDIA_MOUNTED.equals(state)) {\r\n\t\t\t\t\t\t\t\t  path = mm.getExternalCacheDir().getPath();\r\n\t\t\t\t\t\t\t\t  java.io.InputStream input = mm.getContentResolver().openInputStream(_uri);\r\n\t\t\t\t\t\t\t\t  error = mm.getMainHelper().copyFile(input,path,fileName);\r\n\t\t\t\t\t\t\t\t  delete = true;\r\n\t\t\t\t\t\t\t  }\r\n\t\t\t\t\t\t  \t  else\r\n\t\t\t\t\t\t  \t  \terror = true;\r\n\t\t\t\t\t\t  } else {\r\n\t\t\t\t\t\t\t  String filePath = _uri.getPath();\r\n\t\t\t\t\t\t\t  java.io.File f = new java.io.File(filePath);\r\n\t\t\t\t\t\t\t  fileName = f.getName();\r\n\t\t\t\t\t\t\t  path = f.getAbsolutePath().substring(0, f.getAbsolutePath().lastIndexOf(File.separator));\r\n\t\t\t\t\t\t  }\r\n\t\t\t\t\t  }catch(Exception e){\r\n\t\t\t\t\t  \terror = true;\r\n\t\t\t\t\t  }\r\n\r\n\t\t\t\t\t  if(error)\r\n\t\t\t\t\t  {\r\n\t\t\t\t\t\t  mm.runOnUiThread(new Runnable() {\r\n\t\t\t\t\t\t\t  public void run() {\r\n\t\t\t\t\t\t\t\t  mm.getDialogHelper().setInfoMsg(\"Error opening file...\");\r\n\t\t\t\t\t\t\t\t  mm.showDialog(DialogHelper.DIALOG_INFO);\r\n\t\t\t\t\t\t\t  }\r\n\t\t\t\t\t\t  });\r\n\t\t\t\t\t  }\r\n\t\t\t\t\t  else {\r\n\r\n\t\t\t\t\t\t  Emulator.setValueStr(Emulator.ROM_NAME, fileName);\r\n\t\t\t\t\t\t  Emulator.setValueStr(Emulator.ROM_PATH, path);\r\n\t\t\t\t\t\t  System.out.println(\"XX name: \" + fileName);\r\n\t\t\t\t\t\t  System.out.println(\"XX path: \" + path);\r\n\t\t\t\t\t\t  extROM = true;\r\n\t\t\t\t\t\t  final String name = fileName;\r\n\t\t\t\t\t\t  mm.runOnUiThread(new Runnable() {\r\n\t\t\t\t\t\t\t  public void run() {\r\n\t\t\t\t\t\t\t\t  Toast.makeText(mm, \"MAME4droid (0.139) \" + versionName + \" by David Valdeita (Seleuco). Launching: \" + name, Toast.LENGTH_LONG).show();\r\n\t\t\t\t\t\t\t  }\r\n\t\t\t\t\t\t  });\r\n\t\t\t\t\t  }\r\n\t\t\t    }\r\n\t\t\t    else\r\n\t\t\t    {\r\n\t\t\t    \tif(mm.getPrefsHelper().getROMsDIR()!=null && mm.getPrefsHelper().getROMsDIR().length()!=0)\r\n\t\t\t    \t   Emulator.setValueStr(Emulator.ROM_PATH, mm.getPrefsHelper().getROMsDIR());\r\n\t\t\t    }\t\t\r\n\t\t\t    \t\t\t    \r\n\t\t\t\tmm.getMainHelper().updateEmuValues();\r\n\t\t\t\trunT();\r\n\r\n\t\t\t\tif(extROM) {\r\n\t\t\t\t\t/*\r\n\t\t\t\t\tif (pkg != null && \"com.digdroid.alman.dig\".equals(pkg.getHost())) {\r\n\t\t\t\t\t\tPackageManager pm = mm.getPackageManager();\r\n\t\t\t\t\t\tIntent intent2 = pm.getLaunchIntentForPackage(\"com.digdroid.alman.dig\");\r\n\t\t\t\t\t\tmm.startActivity(intent2);\r\n\t\t\t\t\t}*/\r\n\t\t\t\t\tif(delete)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tjava.io.File f = new java.io.File(path,fileName);\r\n\t\t\t\t\t\tf.delete();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmm.runOnUiThread(new Runnable() {\r\n\t\t\t\t\t\tpublic void run() {\r\n\t\t\t\t\t\t\tif(android.os.Build.VERSION.SDK_INT >= 21) {\r\n\t\t\t\t\t\t\t\tmm.finishAndRemoveTask();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tmm.finish();\r\n\t\t\t\t\t\t\tandroid.os.Process.killProcess(android.os.Process.myPid());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\t\t\t\r\n\t\t},\"emulatorNativeMain-Thread\");\r\n\t\t\r\n\t\t\r\n\t\tif(mm.getPrefsHelper().getMainThreadPriority()==PrefsHelper.LOW)\r\n\t\t{\t\r\n\t\t   t.setPriority(Thread.MIN_PRIORITY);\r\n\t\t}   \r\n\t\telse if(mm.getPrefsHelper().getMainThreadPriority()==PrefsHelper.NORMAL)\r\n\t\t{\r\n\t\t   t.setPriority(Thread.NORM_PRIORITY);\r\n\t\t}   \r\n\t\telse\r\n\t\t   t.setPriority(Thread.MAX_PRIORITY);\r\n\t\t\r\n\t\tt.start();\t\t\r\n\t}\r\n\t\r\n\tpublic static int getValue(int key){\r\n\t\treturn getValue(key,0);\r\n\t}\r\n\t\r\n\tpublic static String getValueStr(int key){\r\n\t\treturn getValueStr(key,0);\r\n\t}\r\n\t\r\n\tpublic static void setValue(int key, int value){\r\n\t\tsetValue(key,0,value);\r\n\t}\r\n\t\r\n\tpublic static void setValueStr(int key, String value){\r\n\t\tsetValueStr(key,0,value);\r\n\t}\r\n\t\r\n\tstatic void netplayWarn(final String msg) {\r\n    \tmm.runOnUiThread(new Runnable() {\r\n            public void run() {\r\n            \tToast.makeText(mm, msg, Toast.LENGTH_LONG).show();\r\n            }\r\n    \t});\r\n\t}\r\n \r\n\t//native\r\n\tprotected static native void init(String libPath,String resPath);\r\n\t\r\n\tprotected static native void runT();\r\n\t\r\n\tprotected static native void runVideoT();\r\n\t\t\t\r\n\tsynchronized public static native void setPadData(int i, long data);\r\n\t\r\n\tsynchronized public static native void setAnalogData(int i, float v1, float v2);\r\n\t\r\n\tpublic static native int getValue(int key, int i);\r\n\r\n\tpublic static native String getValueStr(int key, int i);\r\n\t\r\n\tpublic static native void setValue(int key, int i, int value);\r\n        \r\n    public static native void setValueStr(int key, int i, String value);\r\n    \r\n    public static native int netplayInit(String server, int port, int join);\r\n        \r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/seleuco/mame4droid/Emulator.java	(revision 3ed371577077cb70b4fc0548bdf08c73faf33c98)
+++ app/src/main/java/com/seleuco/mame4droid/Emulator.java	(date 1626465291195)
@@ -562,7 +562,7 @@
 			else
 			   nativeVideoT.setPriority(Thread.MAX_PRIORITY);
 			
-			//nativeVideoT.setPriority(9);
+			nativeVideoT.setPriority(9);
 			nativeVideoT.start();
 		}
 	}
